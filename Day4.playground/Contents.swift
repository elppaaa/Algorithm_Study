import Foundation
/*:
 ### [체육복](https://programmers.co.kr/learn/courses/30/lessons/42862?language=swift)
 점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다. 학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다. 예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다. 체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.
 전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요.
 제한사항
 전체 학생의 수는 2명 이상 30명 이하입니다.
 체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
 여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.
 여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다.
 여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.
 */

/*:
 문제의 분류는 탐욕법이다. 현재에 가장 유리한 판단을 하여 문제를 해결하는 방식이다.
 
 문제를 풀때, 전체 학생을 모두 순환하여 잃어버린 학생을 확인하고, 주변에 여분이 있는지 확인하는 방법이 있을 것이고,
 여분이 있는 학생을 순환하여 주변에 잃어버린 학생이 있는지 확인할 수 있을 것이다.
 처음에는, 잃어버린 학생을 순환하여 문제를 풀었으나, 여분이 존재하는 학생 중 잃어버린 학생도 존재 하여 여분의 학생을 기준으로 문제 풀이를 진행하였다.
 
 1. 학생 수만큼 값이 1인 배열을 생성하고, 잃어버린 학생은 -1, 여분이 존재하는 학생은 +1 연산한다.
 2. 여분의 학생을 기준으로 본인 옆 학생이 체육복이 없으면 해당 학생 +1, 본인 -1 을 수행한다.
 3. 0 초과의 개수를 반환한다.
 
 여기에서 중요한 부분은 여분의 체육복이 있는 학생이 체육복을 분실했을 수 있다. + 1 - 1 로 해당 학생은 체육복이 하나이다.
 또, 배열을 순회할 때에 생길 수 있는 문제점인데,
 
 ```
 오름차순으로 순회한다고 가정하자.
 2, 4번 학생은 여분이 있고, 1, 3번 학생은 분실하였다.
 이때, 2번 학생이 3번학생에게 먼저 분실 여부를 확인하면, 1번 / 3번 모두 받을 수 있음에도 불구하고 3번 학생만 받는 경우가 생긴다.
 따라서 오름차순인 경우 왼쪽학생, 내림차순인 경우 오른쪽 학생을 먼저 확인한다.
 ```
 */

func test(_ q: (Int, [Int], [Int]), _ a: Int) {
  let _answer = solution(q.0, q.1, q.2)
  print(_answer)
  
  if _answer == a {
    print("정답.")
  } else {
    print("오답.")
  }
}


func solution(_ n:Int, _ lost:[Int], _ reserve:[Int]) -> Int {
  var students = Array(repeating: 1, count: n)
  lost.map { students[$0-1] -= 1}
  reserve.map { students[$0-1] += 1 }
  
  students.enumerated().reversed()
    .map { (index, value) in
      if value < 2 { return }
      
      if index != students.count - 1 && students[index+1] == 0 {
        students[index+1] += 1
        students[index] -= 1
      } else if index != 0 && students[index-1] == 0 {
        students[index-1] += 1
        students[index] -= 1
      }
    }
  
  return students.filter { $0 > 0 }.count
}

test((5, [2, 4], [1, 3, 5]), 5)
test((5, [2, 4], [3]), 4)
test((3, [3], [1]), 2)

test((5, [2,3,4], [1,2,3]), 4)
test((5, [1,2,3], [2,3,4]), 4)




