import Foundation

/*:
 #### [땅따먹기](https://programmers.co.kr/learn/courses/30/lessons/12913)
 
 땅따먹기 게임을 하려고 합니다. 땅따먹기 게임의 땅(land)은 총 N행 4열로 이루어져 있고, 모든 칸에는 점수가 쓰여 있습니다.
 1행부터 땅을 밟으며 한 행씩 내려올 때, 각 행의 4칸 중 한 칸만 밟으면서 내려와야 합니다.
 단, 땅따먹기 게임에는 한 행씩 내려올 때, 같은 열을 연속해서 밟을 수 없는 특수 규칙이 있습니다.
 
 예를 들면,
 | 1 | 2 | 3 | 5 |
 | 5 | 6 | 7 | 8 |
 | 4 | 3 | 2 | 1 |
 로 땅이 주어졌다면, 1행에서 네번째 칸 (5)를 밟았으면, 2행의 네번째 칸 (8)은 밟을 수 없습니다.
 마지막 행까지 모두 내려왔을 때, 얻을 수 있는 점수의 최대값을 return하는 solution 함수를 완성해 주세요.
 위 예의 경우, 1행의 네번째 칸 (5), 2행의 세번째 칸 (7), 3행의 첫번째 칸 (4) 땅을 밟아 16점이 최고점이 되므로 16을 return 하면 됩니다.
 
 제한사항
 행의 개수 N : 100,000 이하의 자연수
 열의 개수는 4개이고, 땅(land)은 2차원 배열로 주어집니다.
 점수 : 100 이하의 자연수
 
 */

/*:
 각 열 중에서 가장 큰 것을 고르면 된다.
 각 열중에서 가장 큰 것을 고르면 되는 것은 맞지만, 첫번째 열에서 가장 큰 것이, 두 번째 열에서 가장 큰 것의 선택을 막을 수도 있다.
 | 1 | 2 | 2 | 3 |
 | 5 | 6 | 7 | 9 |
 | 4 | 3 | 2 | 1 |
 의 경우 처음 3을 고른다면 다음 9를 고르지 못해 손해일 수 있다.
 하여, 각 열을 진행해가며 가장 큰 것을 골랐을 때의 숫자를 다음 열에 더한다.
 해당 숫자 아래 열은 선택이 불가능 함으로, 두번째로 큰 수를 사용한다.
 다음 열에서도 첫번째 큰 수 와 두번째 큰 수를 이용해 그 다음열에 더한다.
 반복 수행하여 마지막 열에서 가장 큰 수가 나올 수 있는 가장 큰 수이다.
 */

func solution(_ land:[[Int]]) -> Int{
  var land = land
  
  for i in 0..<land.count - 1 {
    var temp = land[i]
    let max = temp.max()!
    let index = temp.firstIndex(of: max)!
    temp.remove(at: index)
    let secondMax = temp.max()!
    
    for j in 0..<land[0].count {
      if j != index {
        land[i+1][j] += max
      } else {
        land[i+1][j] += secondMax
      }
    }
  }
  
  return land.last!.max()!
}



if solution([[1,2,3,5],[5,6,7,8],[4,3,2,1]]) == 16 {
  print("정답")
} else {
  print("오답")
}

